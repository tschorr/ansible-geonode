###
# Pulls the code from a remote Git repository, configures the web application,
# creates a virtualenv, and collects static assets
#
---
- name: ensure apt cache is up to date
  apt: update_cache=yes
  become: yes

- name: ensure web server packages are installed
  apt: name={{item}}
  become: yes
  with_items:
    - git
    - python-dev
    - python-pip
    - libpq-dev
    - python-virtualenv
    - postgresql-client-common
    - postgresql-client
    - python-imaging
    - python-lxml
    - python-pyproj
    - python-shapely
    - python-gdal
    - python-nose
    - python-httplib2
    - python-psycopg2
    - gettext
    - build-essential
    - libxml2-dev
    - libxslt1-dev
    - zlib1g-dev
    - gdal-bin
    - libgeos-dev
    - libproj-dev
    - unzip
    - zip
    - libjpeg-dev
    - libpng-dev
    - libgdal-dev
    - curl


- name: install known_hosts file to access GitHub
  copy: src=known_hosts dest={{ssh_dir}}/known_hosts

- name: check if project template already exists
  stat:
    path: "{{app_code_dir}}/{{app_name}}"
  register: app_dir

- name: checkout latest web app code
  git: repo={{code_repository}} version={{branch_name}} dest={{app_code_dir}}/{{app_name}}
  when: github_user != "GeoNode" and (app_dir.stat.isdir is not defined)

- name: check if virtualenv already exists
  stat:
    path: "{{virtualenv_dir}}/{{app_name}}"
  register: venv_dir

- name: create virtualenv for Django web application
  shell: virtualenv --system-site-packages {{virtualenv_dir}}/{{app_name}}
  when: venv_dir.stat.isdir is not defined

- name: update pip in virtualenv to latest version
  pip: name=pip
       virtualenv={{virtualenv_dir}}/{{app_name}}
       extra_args='-U'

- name: upload requirements file
  copy: src=requirements.txt dest="{{virtualenv_dir}}/{{app_name}}/requirements.txt"

- name: install celery required in GeoNode setup.py
  pip: name=celery
       virtualenv={{virtualenv_dir}}/{{app_name}}
       version=4.1.0

- name: install web application dependencies listed in requirements.txt
  pip: requirements={{virtualenv_dir}}/{{app_name}}/requirements.txt virtualenv={{virtualenv_dir}}/{{app_name}}

- name: checkout latest web app code from geonode-project {{branch_name}} branch
  shell: cd {{app_code_dir}} && {{virtualenv_dir}}/{{app_name}}/bin/django-admin.py startproject {{app_name}} --template=https://github.com/GeoNode/geonode-project/archive/{{branch_name}}.zip -e py,rst,yml -n Vagrantfile
  when: github_user == "GeoNode" and (app_dir.stat.isdir is not defined)

- name: copy the local_settings.py file in place
  template: src=local_settings.py.j2 dest={{app_code_dir}}/{{app_name}}/{{app_name}}/local_settings.py

- name: remove MEDIA_ROOT definition in settings.py since it is defined in local_settings
  shell: sed -i -e "/MEDIA_ROOT =/d" {{app_code_dir}}/{{app_name}}/{{app_name}}/settings.py

- name: patch local_settings import in settings.py
  shell: sed -i -e "s/    from geonode\.local_settings import \*/    from \.local_settings import \*/" {{app_code_dir}}/{{app_name}}/{{app_name}}/settings.py

- name: patch allowed hosts in settings.py
  shell: sed -i -e "s/    ALLOWED_HOSTS = \['localhost', 'django', 'geonode'\]/    ALLOWED_HOSTS = \['localhost', '{{ server_name }}'\]/" {{app_code_dir}}/{{app_name}}/{{app_name}}/settings.py
  notify:
    - restart uwsgi

# FIXME: Remove the following 4 commands once GeoNode 2.6.4 is released
- name: Temporary fix to downgrade package transifex-client
  pip: name=transifex-client
       version=0.12.5
       virtualenv={{virtualenv_dir}}/{{app_name}}
  when: geonode_version == "2.6.3"

- name: Temporary fix to uninstall package python-slugify
  pip: name=python-slugify
       state=absent
       virtualenv={{virtualenv_dir}}/{{app_name}}
  when: geonode_version == "2.6.3"

- name: Temporary fix to downgrade package django-polymorphic
  pip: name=django-polymorphic
       version=1.3
       virtualenv={{virtualenv_dir}}/{{app_name}}
  when: geonode_version == "2.6.3"

- name: Temporary fix to install package awesome-slugify
  pip: name=awesome-slugify
       version=1.6.5
       state=forcereinstall
       virtualenv={{virtualenv_dir}}/{{app_name}}
  when: geonode_version == "2.6.3"
# FIXME: Remove up to here

- name: create static directory for Django app if it does not exist
  file: path=/var/www/{{app_name}}/static state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: create uploaded directory for Django app if it does not exist
  file: path=/var/www/{{app_name}}/uploaded state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: create uploaded/layers directory for Django app if it does not exist
  file: path=/var/www/{{app_name}}/uploaded/layers/ state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: create uploaded/thumbs directory for Django app if it does not exist
  file: path=/var/www/{{app_name}}/uploaded/thumbs/ state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: create uploaded/avatars directory for Django app if it does not exist
  file: path=/var/www/{{app_name}}/uploaded/avatars/ state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: create uploaded/documents directory for Django app if it does not exist
  file: path=/var/www/{{app_name}}/uploaded/documents/ state=directory mode=0777 owner=www-data group=www-data
  become: yes

- name: rename the vassals-default.ini file to the app name
  file: src=/etc/uwsgi-emperor/vassals/vassals-default.skel dest=/etc/uwsgi-emperor/vassals/{{app_name}}.ini owner=www-data group=www-data state=link
  become: yes
  when: not apache

- name: create uwsgi log directory
  file: path=/var/log/uwsgi state=directory mode=0777 owner=www-data group=www-data
  become: yes
  when: not apache

- name: create nginx log directory
  file: path=/var/log/nginx state=directory mode=0777 owner=www-data group=www-data
  become: yes
  when: not apache

- name: make wsgi.py executable
  become: yes
  file:
    path: "{{app_code_dir}}/{{app_name}}/{{app_name}}/wsgi.py"
    mode: 0755
  when: apache

- name: create {{db_metadata_instance}} db
  postgresql_db: name={{db_metadata_instance}}
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 owner={{db_user}}
                 template='template0'

- name: add postgis to the {{db_metadata_instance}} db
  postgresql_ext: name=postgis db={{db_metadata_instance}}

- name: create {{db_data_instance}} db
  postgresql_db: name={{db_data_instance}}
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 owner={{db_user}}
                 template='template0'

- name: add postgis to the {{db_data_instance}} db
  postgresql_ext: name=postgis db={{db_data_instance}}

- name: make manage.py executable
  become: yes
  file:
    path: "{{app_code_dir}}/{{app_name}}/manage.py"
    mode: 0755

- name: Django makemigrations
  django_manage: command=makemigrations
                 app_path={{app_code_dir}}/{{app_name}}
                 virtualenv={{virtualenv_dir}}/{{app_name}}
                 settings={{main_module}}.settings

- name: Django migrate
  django_manage: command=migrate
                 app_path={{app_code_dir}}/{{app_name}}
                 virtualenv={{virtualenv_dir}}/{{app_name}}
                 settings={{main_module}}.settings

- name: Django syncdb
  django_manage: command=syncdb
                 app_path={{app_code_dir}}/{{app_name}}
                 virtualenv={{virtualenv_dir}}/{{app_name}}
                 settings={{main_module}}.settings

- name: Django collectstatic
  django_manage: command=collectstatic
                 app_path={{app_code_dir}}/{{app_name}}
                 virtualenv={{virtualenv_dir}}/{{app_name}}
                 settings={{main_module}}.settings

- name: wait for geoserver to be up
  shell: curl --head --silent http://localhost:8080/geoserver/web/
  register: result
  until: result.stdout.find(' 200') != -1
  retries: 5
  delay: 60

- name: Copy create_db_store script in place
  template: src=create_db_store.py.j2 dest={{app_code_dir}}/{{app_name}}/create_db_store.py

- name: create the db datastore in geoserver
  command: "{{virtualenv_dir}}/{{app_name}}/bin/python {{app_code_dir}}/{{app_name}}/create_db_store.py"

- name: Copy super user fixture in place
  template: src=sample_admin.json.j2 dest={{app_code_dir}}/{{app_name}}/sample_admin.json

- name: Load super user fixture
  django_manage: command="loaddata {{app_code_dir}}/{{app_name}}/sample_admin.json"
                 app_path={{app_code_dir}}/{{app_name}}
                 virtualenv={{virtualenv_dir}}/{{app_name}}
                 settings={{main_module}}.settings

- name: check if oauth configuration exists
  stat:
    path: /var/lib/tomcat8/webapps/geoserver/data/security/filter/geonode-oauth2/config.xml
  register: geonode_oauth_config
  become: yes

- name: Copy oauth fixture in place
  template: src=default_oauth_apps.json.j2 dest={{app_code_dir}}/{{app_name}}/default_oauth_apps.json
  when: geonode_oauth_config.stat.exists

- name: Load oAuth fixture
  when: geonode_oauth_config.stat.exists
  django_manage: command="loaddata {{app_code_dir}}/{{app_name}}/default_oauth_apps.json"
                 app_path={{app_code_dir}}/{{app_name}}
                 virtualenv={{virtualenv_dir}}/{{app_name}}
                 settings={{main_module}}.settings
